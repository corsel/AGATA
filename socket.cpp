#include "socket.h"

// AGSocket class
DWORD AGSocket::receive(void* argArg) // private static
{
  std::cout << "Debug - AGSocket::receive: Method called." << std::endl;
  AGSocket* object = reinterpret_cast<AGSocket*>(argArg);
  
  const int BUFFER_SIZE = 16;
  char buffer[BUFFER_SIZE];
  memset(buffer, '\0', BUFFER_SIZE);
  if (recv(object->socket, buffer, BUFFER_SIZE, 0) != SOCKET_ERROR)
  {
    buffer[BUFFER_SIZE - 1] = '\0';
    std::cout << "Debug - AGSocket::accept: Data received: " << buffer << std::endl;
  }
  else
  {
    std::cout << "Warning - AGSocket::receive: Error code: " << WSAGetLastError() << std::endl;
  }
  return 0;
}

AGSocket::AGSocket() 
{
  // Create a localhost server on port 8081 to obtain data generated by J661 client messages. 
  sockaddr_in addr =
  {
    AF_INET,
    htons(SERVER_PORT_NUM),
    in_addr {127, 0, 0, 1}
  };
  
  WSADATA errData;
  WSAStartup(MAKEWORD(2, 2), &errData);
  this->socket = ::socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
  if (this->socket != INVALID_SOCKET)
  {
    bind(this->socket, reinterpret_cast<sockaddr*>(&addr), sizeof(sockaddr_in));
    listen(this->socket, NUM_CONNECTIONS);
  }
  else
  {
    std::cout << "Warning - AGSocket::AGSocket: Socket could not be created, error code is " << WSAGetLastError() << std::endl;
    return;
  }

  LPDWORD pid = NULL;
  LPVOID paramPtr = static_cast<LPVOID>(this);
  std::cout << "Debug - AGSocket::AGSocket: Method called." << std::endl;
  CreateThread(
    NULL, 
    0, 
    static_cast<LPTHREAD_START_ROUTINE>(AGSocket::receive), 
    paramPtr, 
    NULL, 
    pid);
}