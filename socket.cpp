#include "socket.h"

// AGSocket class
void AGSocket::receive() // private
{
  const int BUFFER_SIZE = 1024;
  char buffer[BUFFER_SIZE];
  memset(buffer, '\0', BUFFER_SIZE);
  while (recv(this->socket, buffer, BUFFER_SIZE, 0) != SOCKET_ERROR)
  {
    buffer[BUFFER_SIZE - 1] = '\0';
    std::cout << "Debug - AGSocket::accept: Data received: " << buffer << std::endl;
  }

  int errCode = WSAGetLastError();
  // WSAEINTR error code is emitted when socket is terminated with key press. Suppress error message on a regular socket termination.
  if (errCode != WSAEINTR)
    std::cout << "Warning - AGSocket::receive: Error code: " << WSAGetLastError() << std::endl;
}

AGSocket::AGSocket()
{
  // Create a localhost server on port 8081 to obtain data generated by J661 client messages. 
  sockaddr_in addr =
  {
    AF_INET,
    htons(AGLocalConst::SERVER_PORT_NUM),
    in_addr {127, 0, 0, 1}
  };

  WSADATA errData;
  WSAStartup(MAKEWORD(2, 2), &errData);
  this->socket = ::socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
  if (this->socket != INVALID_SOCKET)
  {
    bind(this->socket, reinterpret_cast<sockaddr*>(&addr), sizeof(sockaddr_in));
    listen(this->socket, AGLocalConst::NUM_CONNECTIONS);
  }
  else
  {
    std::cout << "Warning - AGSocket::AGSocket: Socket could not be created, error code is: " << WSAGetLastError() << std::endl;
    return;
  }

  std::thread recvThread(&AGSocket::receive, this);
  recvThread.detach();
}
AGSocket::~AGSocket()
{
  this->terminate();
}
void AGSocket::terminate()
{
  if (this->socket != INVALID_SOCKET)
  {
    std::cout << "Debug - AGSocket::terminate: Method called." << std::endl;
    closesocket(this->socket);
    this->socket = INVALID_SOCKET;
  }
  else
    std::cout << "Debug - AGSocket::terminate: Dead socket." << std::endl;
}